openapi: 3.0.2
info:
  version: 1.0.0
  title: RO-Crates
  description: An API to perform CRUD operations on RO Crates (https://www.researchobject.org/ro-crate)
  termsOfService: http://swagger.io/terms/
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: http://localhost/
paths:
  /crate:
    get:
      description: |
        Returns all ro-crates from the system that the user has access to.
      operationId: findRoCrates
      parameters:
        - name: tags
          in: query
          description: tags to filter by
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
        - name: limit
          in: query
          description: maximum number of results to return
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: ro-crate response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RoCrate'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      description: Creates a new ro-crate in the store. Duplicates are allowed
      operationId: addRoCrate
      requestBody:
        description: RoCrate to add to the store
        required: true
        content:
          application/json:
            schema:
              x-body-name: ro-crate
              $ref: '#/components/schemas/NewRoCrate'
      responses:
        '200':
          description: ro-crate response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Crate'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /crate/{id}:
    get:
      description: Returns a user based on a single ID, if the user does not have access to the ro-crate
      operationId: findRoCrateById
      parameters:
        - name: id
          in: path
          description: ID of ro-crate to fetch
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: ro-crate response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Crate'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      description: deletes a single ro-crate based on the ID supplied
      operationId: deleteRoCrate
      parameters:
        - name: id
          in: path
          description: ID of ro-crate to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: ro-crate deleted
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Crate:
      allOf:
        - $ref: '#/components/schemas/NewCrate'
        - type: object
          required:
            - id
          properties:
            id:
              type: integer
              format: int64

    NewCrate:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        tag:
          type: string

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
